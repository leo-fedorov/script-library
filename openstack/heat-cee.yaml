heat_template_version: queens

description: >
  Template to deploy and configure 3 VMs for DE, defaults for Pre-sales ICM

parameter_groups:

- label: Required VM parameters
  description: Parameters used for VM provisioning
  parameters:
  - key_name
  - image_id
  - flavor

- label: Additional configurations
  description: Choose additional configurations
  parameters:
  - create_sg
  - create_net
  - assign_fip

- label: Additional parameters
  description: Additional parameters depending on configuration choice
  parameters:
  - sg_name
  - sg_ports

- label: Dedicated Networking Settings
  description: Parameters needed if dedicated networking is chosen
  parameters:
  - private_network
  - dns_nameservers
  - external_network

parameters:
    key_name:
        type: string
        label: Key Name
        description: Name of key-pair to be used for instance
        default: kaas
        constraints:
            - custom_constraint: nova.keypair
    image_id:
        type: string
        label: Image ID
        description: Image to be used for instance
        default: 71276a73-98ea-4f06-89c9-bc0d4bf0e4d0
        constraints:
            - custom_constraint: glance.image
    flavor:
        type: string
        label: Instance Type
        description: Type of instance (flavor) to be used for instance
        default: 35a4c62c-06ff-4281-981c-6e30e4d0ab55
        constraints:
            - custom_constraint: nova.flavor

# Create separate security group
    create_sg:
        type: boolean
        label: Create Security Group
        description: Whether or not to create a security group for the VM
        default: yes

    sg_name:
        type: string
        label: Security Group Name
        description: Name of the existing Security Group to use
        default: ppetriuk-public
#        constraints:
#            - custom_constraint: neutron.security_group
    sg_ports:
        type: comma_delimited_list
        label: Security Group TCP Ports
        default: "22,80,443,8080,8000"
#TODO: Add a rule that will allow All ports in that security group to talk to each other


# Create private network plumbing
    create_net:
        type: boolean
        label: Create dedicated private network
        description: Whether or not to create a private network for the VM
        default: yes
    private_network:
       type: string
       label: Private network name
       description: Name of existing private network to use
       default: dee-demo
#TODO: it still requires to choose the private, even if no effect
       constraints:
           - custom_constraint: neutron.network
    dns_nameserver:
        type: comma_delimited_list
        label: DNS IPs
        description: Comma separated list
        default: 8.8.8.8, 8.8.4.4


    assign_fip:
        type: boolean
        label: Assign FIP
        description: Whether or not to assign Floating IP to the VM
        default: yes
    external_network:
        type: string
        label: External network name
        description: Name of the external network for FIP 
        default: public
#        constraints:
#            - custom_constraint: neutron.network
    
conditions:
    create_private_net: {get_param: create_net}
#    create_sec_group: False #TODO: add this!

resources:

# Take care of private networking, if needed
    private_network:
        type: OS::Neutron::Net
        condition: create_private_net

    private_subnet:
        type: OS::Neutron::Subnet
        properties:
            network_id: { get_resource: private_network}
            cidr: "10.8.1.0/24"
            dns_nameservers: {get_param: dns_nameserver}
            ip_version: 4
        condition: create_private_net

    private_router:
        type: OS::Neutron::Router
        properties:
            external_gateway_info: { network: {get_param: external_network}}
        condition: create_private_net

    private_router_interface:
        type: OS::Neutron::RouterInterface
        properties:
            router_id: { get_resource: private_router }
            subnet: { get_resource: private_subnet }
        condition: create_private_net

# Take care of Security Groups

#    bootstrap_sg:
#    type: OS::Neutron::SecurityGroup
#    properties:
#        name:
#            list_join:
#            - '-'
#            - ['kass', {get_param: OS::stack_id}]
#        rules:
#            repeat:
#                for_each:
#                    <%port%>: {get_param: ports}
#                template:
#                    protocol: tcp
#                    port_range_min: <%port%>
#                    port_range_max: <%port%>
#        condition: {get_param: create_sg}

    ucps:
        type: OS::Heat::ResourceGroup
        properties:
            count: 3
            resource_def:
                type: OS::Nova::Server
                properties:
                    name: 
                        list_join:
                        - "_"
                        - ["ucp_%index%", {get_param: "OS::stack_id"}]
                    key_name: {get_param: key_name}
                    image: {get_param: image_id}
                    flavor: {get_param: flavor}
                    security_groups: [{get_param: sg_name}] #TODO: should be "if"
                    networks: 
                        - {network: {if: [create_private_net, {get_resource: internal_network}, {get_param: private_network}]}}

outputs:
    net_name:
        value: {get_attr: [internal_network, name]}
        condition: create_private_net
#    instance_ip:
#        description: The IP address of the deployed instance
#        value: { get_attr: [bootstrap_instance, first_address] }
#    instance_name:
#        description: Details of the deployed instance
#        value: { get_attr: [bootstrap_instance] }
