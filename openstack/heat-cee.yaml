heat_template_version: queens

description: >
  Template to deploy and configure 3 VMs for DE, defaults for Pre-sales ICM

parameter_groups:

- label: Required VM parameters
  description: Parameters used for VM provisioning
  parameters:
  - key_name
  - image_id
  - flavor

- label: Additional configurations
  description: Choose additional configurations
  parameters:
  - create_sg
  - create_net
  - assign_fip

- label: Additional parameters
  description: Additional parameters depending on configuration choice
  parameters:
  - sg_name
  - sg_ports

- label: Dedicated Networking Settings
  description: Parameters needed if dedicated networking is chosen
  parameters:
  - private_network
  - dns_nameservers
  - external_network

parameters:
    key_name:
        type: string
        label: Key Name
        description: Name of key-pair to be used for instance
        default: kaas
        constraints:
            - custom_constraint: nova.keypair
    image_id:
        type: string
        label: Image ID
        description: Image to be used for instance
        default: 71276a73-98ea-4f06-89c9-bc0d4bf0e4d0
        constraints:
            - custom_constraint: glance.image
    flavor:
        type: string
        label: Instance Type
        description: Type of instance (flavor) to be used for instance
        default: b960dcde-4cd2-4db2-a711-8e549c20e4eb
        constraints:
            - custom_constraint: nova.flavor

# Create separate security group
    create_sg:
        type: boolean
        label: Create Security Group
        description: Whether or not to create a security group for the VM
        default: yes

    sg_name:
        type: string
        label: Security Group Name
        description: Name of the existing Security Group to use
        default: ppetriuk-public
    sg_ports:
        type: comma_delimited_list
        label: Security Group TCP Ports
        default: "22,80,443"

# Create private network plumbing
    create_net:
        type: boolean
        label: Create dedicated private network
        description: Whether or not to create a private network for the VM
        default: yes
    private_network:
       type: string
       label: Private network name
       description: Name of existing private network to use
       default: private
    dns_nameservers:
        type: comma_delimited_list
        label: DNS IP addresses
        description: IPs separated by comma
        default: 8.8.8.8,8.8.4.4

    assign_fip:
        type: boolean
        label: Assign FIPs to all VMs
        description: Whether or not to assign Floating IP to the VM
        default: yes
    external_network:
        type: string
        label: External network name
        description: Name of the external network for FIP 
        default: public
    
conditions:
    create_private_net: {get_param: create_net}
    create_sec_group: {get_param: create_sg}
    create_fip: {get_param: assign_fip}

resources:

# Take care of private networking, if needed
    dedicated_network:
        type: OS::Neutron::Net
        condition: create_private_net

    dedicated_subnet:
        type: OS::Neutron::Subnet
        properties:
            network_id: { get_resource: dedicated_network}
            cidr: "10.8.1.0/24"
            dns_nameservers: {get_param: dns_nameservers}
            ip_version: 4
        condition: create_private_net

    dedicated_router:
        type: OS::Neutron::Router
        properties:
            external_gateway_info: { network: {get_param: external_network}}
        condition: create_private_net

    dedicated_router_interface:
        type: OS::Neutron::RouterInterface
        properties:
            router_id: { get_resource: dedicated_router }
            subnet: { get_resource: dedicated_subnet }
        condition: create_private_net

# Take care of Security Groups if needed

    dedicated_sg:
        type: OS::Neutron::SecurityGroup
        properties:
            name:
                list_join:
                - '-'
                - ['ucp', {get_param: "OS::stack_id"}]
            rules:
                repeat:
                    for_each:
                        <%port%>: {get_param: sg_ports}
                    template:
                        protocol: tcp
                        port_range_min: <%port%>
                        port_range_max: <%port%>
        condition: create_sec_group

# Create VM ports

    ucp_ports:
        type: OS::Heat::ResourceGroup
        properties:
            count: 3
            resource_def:
                type: OS::Neutron::Port
                properties:
                    network_id:
                        if:
                            - create_private_net
                            - get_resource: dedicated_network
                            - get_param: private_network
                    security_groups:
                    - default
                    - if:
                        - create_sec_group
                        - get_resource: dedicated_sg
                        - get_param: sg_name
        depends_on: dedicated_router_interface

# Allocate floating Ips if needed

    ucp_fips:
        type: OS::Heat::ResourceGroup
        properties:
            count: 3
            resource_def:
                type: OS::Neutron::FloatingIP
                properties:
                  floating_network: {get_param: external_network}
        condition: create_fip

    ucp_0:
        type: OS::Nova::Server
        properties:
            name: 
                list_join:
                - "_"
                - ["ucp_0", {get_param: "OS::stack_id"}]
            key_name: {get_param: key_name}
            image: {get_param: image_id}
            flavor: {get_param: flavor}
            networks: 
                - port: {get_attr: [ucp_ports, resource.0]} 
                  floating_ip:
                    if: [create_fip, {get_attr: [ucp_fips, resource.0]},""]

# I have to do below because of https://bugs.launchpad.net/heat/+bug/1470614

    ucp_1:
        type: OS::Nova::Server
        properties:
            name: 
                list_join:
                - "_"
                - ["ucp_1", {get_param: "OS::stack_id"}]
            key_name: {get_param: key_name}
            image: {get_param: image_id}
            flavor: {get_param: flavor}
            networks: 
                - port: {get_attr: [ucp_ports, resource.1]} 
                  floating_ip: 
                    if: [create_fip, {get_attr: [ucp_fips, resource.1]},""]                  

    ucp_2:
        type: OS::Nova::Server
        properties:
            name: 
                list_join:
                - "_"
                - ["ucp_2", {get_param: "OS::stack_id"}]
            key_name: {get_param: key_name}
            image: {get_param: image_id}
            flavor: {get_param: flavor}
            networks: 
                - port: {get_attr: [ucp_ports, resource.2]} 
                  floating_ip:
                    if: [create_fip, {get_attr: [ucp_fips, resource.2]},""]

outputs:
    "UCP 0 Info":
        description: Connect to UCP 0 VM using the networking info below
        value:
            get_attr:
                - ucp_0
                - networks

    "UCP 1 Info":
        description: Connect to UCP 1 VM using the networking info below
        value:
            get_attr:
                - ucp_1
                - networks

    "UCP 2 Info":
        description: Connect to UCP 2 VM using the networking info below
        value:
            get_attr:
                - ucp_2
                - networks
#            if:
#            - {get_param: assign_fip}
#            - {get_attr: [ucp_fips, resource.0.floating_ip_address]}
#            - get_attr: [ucp_0, networks.private]
#        
#        description: The IP address of the deployed instance
#        value: { get_attr: [bootstrap_instance, first_address] }
#    instance_name:
#        description: Details of the deployed instance
#        value: { get_attr: [bootstrap_instance] }
