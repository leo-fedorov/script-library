heat_template_version: queens

description: >
  Template to deploy and configure KaaS bootstrap VM, defaults for Pre-sales ICM

parameters:
    key_name:
        type: string
        label: Key Name
        description: Name of key-pair to be used for instance
        default: kaas
        constraints:
            - custom_constraint: nova.keypair
    image_id:
        type: string
        label: Image ID
        description: Image to be used for instance
        default: bionic-server-cloudimg-amd64-20190612
        constraints:
            - custom_constraint: glance.image
    flavor:
        type: string
        label: Instance Type
        description: Type of instance (flavor) to be used for instance
        default: kaas.small
        constraints:
            - custom_constraint: nova.flavor
    dns_nameserver:
        type: comma_delimited_list
        label: DNS IPs
        description: DNS IPs to use that are separated by commas
        default: 5.43.231.15
    create_sg:
        type: boolean
        label: Create Security Group
        description: Whether or not to create a security group for the VM
        default: yes
    sg_name:
        type: string
        label: Security Group Name
        description: Name of the existing Security Group to use
        defaul: kaas-sg
        constraints:
            - custom_constraint: neutron.security_group
    ports:
        type: comma_delimited_list
        label: Security Group TCP Ports
        default: "22,80,443,8080,8000"

    create_net:
        type: boolean
        label: Create private net
        description: Whether or not to create a private network for the VM
        default: yes
    private_network:
       type: string
       label: Private network name
       description: Name of existing private network to use
       default: kaas-bootstrap
       constraints:
           - custom_constraint: neutron.network
    assign_fip:
        type: boolean
        label: Assign FIP
        description: Whether or not to assign Floating IP to the VM
        default: no
    external_network:
        type: string
        label: External network name
        description: Name of the external network that 
        default: public
        constraints:
            - custom_constraint: neutron.network
    
#conditions:
#  create_sg_res: {equals : [{get_param: create_sg}, "prod"]}

resources:

#    bootstrap_network:
#        type: OS::N
#        condition: {get_param: create_net}

# Take care of Security Groups

    bootstrap_sg:
    type: OS::Neutron::SecurityGroup
    properties:
        name:
            list_join:
            - '-'
            - ['kass', {get_param: OS::stack_id}]
        rules:
            repeat:
                for_each:
                    <%port%>: {get_param: ports}
                template:
                    protocol: tcp
                    port_range_min: <%port%>
                    port_range_max: <%port%>        
        condition: {get_param: create_sg}

# Take care of Private Network

    bootstrap_net:
    type: OS::Neutron::Net

  internal_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: internal_net }
      cidr: "10.8.1.0/24"
      dns_nameservers: [ "8.8.8.8", "8.8.4.4" ]
      ip_version: 4

  internal_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: public }

  internal_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: internal_router }
      subnet: { get_resource: internal_subnet }


#    bootstrap_fip:
#        condition: {get_param: assign_fip}

#    bootstrap_instance:
#        type: OS::Nova::Server
#        properties:
#            key_name: my_key
#            image: ubuntu-trusty-x86_64
#            flavor: m1.small
#            network: {if: ["create_prod_res", "s_prod", "s_test"]}

#outputs:
#    instance_ip:
#        description: The IP address of the deployed instance
#        value: { get_attr: [bootstrap_instance, first_address] }
#    instance_name:
#        description: Details of the deployed instance
#        value: { get_attr: [bootstrap_instance] }
